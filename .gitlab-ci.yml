variables:
  DOCKER_DRIVER: overlay2
  GITLAB_IMAGE: ${CI_REGISTRY_IMAGE}${GITLAB_IMAGE_SUFFIX}

stages:
  - Image
  - Check

workflow:
  rules:
    - if: '$CI_SERVER_HOST != "gitlab.com"'
      when: never
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH


Sign-off check:
  stage: Check
  image: python:3.7-alpine
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  needs: []
  script:
    - apk add git
    - .gitlab-ci/signed-off-by-check > ${CI_PROJECT_DIR}/sign-off-report.xml
  artifacts:
    reports:
      junit: sign-off-report.xml


Latest image:
  stage: Image
  image: docker:latest
  needs: []
  rules:
    - if: '$CI_PROJECT_PATH == "ternaris/marv-robotics" &&
           $CI_COMMIT_BRANCH == "master" &&
           $CI_PIPELINE_SOURCE != "schedule"'
  services:
    - docker:dind
  before_script:
    - export tag=latest
  script:
    - chmod og-w . -R

    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}

    - docker pull ${GITLAB_IMAGE}:latest || true
    - docker build -t ${GITLAB_IMAGE}:${tag} -t ${DOCKERHUB_IMAGE}:${tag} --cache-from ${GITLAB_IMAGE}:latest .
    - docker push ${GITLAB_IMAGE}:${tag}
    - docker push ${DOCKERHUB_IMAGE}:${tag}


Release image:
  extends: Latest image
  rules:
    - if: '$CI_PROJECT_PATH == "ternaris/marv-robotics" &&
           $CI_COMMIT_TAG =~ /^v\d\d\.\d\d\.\d+ce$/ &&
           $CI_PIPELINE_SOURCE != "schedule"'
  before_script:
    - export tag=${CI_COMMIT_TAG:1:-3}


# Latest tag and "latest" tag
Keep images up-to-date:
  stage: Image
  image: docker:latest
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  services:
    - docker:dind
  script:
    - apk add --no-cache git
    - chmod og-w . -R

    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}

    - image=${GITLAB_IMAGE}:latest;
    - base=$(sed -n "s/FROM \(.*\)/\1/p" Dockerfile)
    - docker pull ${image} || true;
    - docker build --pull -t ${image} -t ${DOCKERHUB_IMAGE}:latest --cache-from ${image} .
    - docker push ${image}
    - docker push ${DOCKERHUB_IMAGE}:latest

    - tags="$(git tag -l 'v*+ce' |tail -1)"
    - 'for tag in ${tags}; do
         git reset --hard ${tag};
         tag=${tag:1:-3};
         image=${GITLAB_IMAGE}:${tag};
         base=$(sed -n "s/FROM \(.*\)/\1/p" Dockerfile);
         docker pull ${image} || true;
         docker build --pull -t ${image} -t ${DOCKERHUB_IMAGE}:${tag} --cache-from ${image} .;
         docker push ${image};
         docker push ${DOCKERHUB_IMAGE}:${tag};
      done'
